<?php

namespace App\Http\Controllers;


use Illuminate\Support\Facades\Http;
use App\Models\Plugin;

class VulnerabilityController extends Controller
{
    public function index()
    {

        $pluginsAll = Plugin::all();
        $plugins = [];

        foreach ($pluginsAll as $plugin) {
            $plugins[$plugin->slug] = [
                'version' => $plugin->version,
                'name' => $plugin->name,
            ];
        }


        $vulnerabilities = [];

        foreach ($plugins as $plugin => $pluginData) {
            $response = Http::get("https://www.wpvulnerability.net/plugin/{$plugin}/");

            if ($response->successful()) {
                $data = $response->json();

                if (!empty($data['data']['vulnerability'])) {
                    foreach ($data['data']['vulnerability'] as $vulnerabily) {
                        $vulnerabilities[] = [
                            'plugin' => $pluginData['name'],
                            'version' => $vulnerabily['operator']['max_version'] ?? 'N/A',
                            'description' => $vulnerabily['source'][0]['description'] ?? 'Sin descripciÃ³n',
                            'severity' => $vulnerabily['impact']['cvss']['severity'] ?? 'Sin datos'
                        ];
                    }
                }

            }

        }

        return view('vulnerabilities.index', compact('vulnerabilities'));
    }

    public function filterVulnerabilities()
    {
        $pluginsAll = Plugin::all();
        $plugins = [];

        // Obtener slugs y versiones de los plugins en la base de datos
        foreach ($pluginsAll as $plugin) {
            $plugins[$plugin->slug] = [
                'version' => $plugin->version,
                'name' => $plugin->name,
                'project_id' => $plugin->project
            ];
        }

        $vulnerabilities = [];

        foreach ($plugins as $plugin => $pluginData) {
            $response = Http::get("https://www.wpvulnerability.net/plugin/{$plugin}/");

            if ($response->successful()) {
                $data = $response->json();

                if (!empty($data['data']['vulnerability'])) {
                    foreach ($data['data']['vulnerability'] as $vulnerabily) {
                        $vulnVersion = $vulnerabily['operator']['max_version'] ?? 'N/A';

                        // Comparar versiones y filtrar
                        if ($vulnVersion !== 'N/A' && version_compare($vulnVersion, $pluginData['version'], '>=')) {

                            $vulnerabilities[] = [
                                'plugin' => $pluginData['name'],
                                'version' => $vulnVersion,
                                'link' => $vulnerabily['source'][0]['link'] ?? 'Sin enlace',
                                'severity' => $vulnerabily['impact']['cvss']['severity'] ?? 'Sin datos',
                                'project_id' => $pluginData['project_id']['name']
                            ];

                        }
                    }
                }
            }
        }

        return view('vulnerabilities.vulnerabilities', compact('vulnerabilities'));
    }
}
